{"version":3,"sources":["components/Pythagorean/Pythagorean.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","Form","form","Input","input","Label","label","P","p","H1","h1","Div1","div","Div2","DivB","Pythagorean","props","state","val1","val2","result","handleChange1","bind","handleChange2","thereom","e","preventDefault","this","setState","Number","target","value","pySum","pySqrt","Math","sqrt","toFixed","type","onChange","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iyCAIA,IAAMA,EAASC,IAAOC,OAAV,KAQNC,EAAOF,IAAOG,KAAV,KAQJC,EAAQJ,IAAOK,MAAV,KAKLC,EAAQN,IAAOO,MAAV,KAILC,EAAIR,IAAOS,EAAV,KAODC,EAAKV,IAAOW,GAAV,KAQFC,EAAOZ,IAAOa,IAAV,KAGJC,EAAOd,IAAOa,IAAV,KAGJE,EAAOf,IAAOa,IAAV,KAoEKG,E,kDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,EACNC,KAAM,EACNC,OAAQ,GAEV,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBATE,E,0DAWHG,GACZA,EAAEC,iBACFC,KAAKC,SAAS,CACZV,KAAMW,OAAOJ,EAAEK,OAAOC,W,oCAEZN,GACZA,EAAEC,iBACFC,KAAKC,SAAS,CACZT,KAAMU,OAAOJ,EAAEK,OAAOC,W,8BAGlBN,GACNA,EAAEC,iBACF,IAAIM,EAAQ,SAACL,KAAKV,MAAMC,KAAQ,GAApB,SAA0BS,KAAKV,MAAME,KAAQ,GACrDc,EAASC,KAAKC,KAAKH,GAAOI,QAAQ,GACtCT,KAAKC,SAAS,CACZR,OAAQa,M,+BAOZ,OACA,kBAAChC,EAAD,KACE,kBAACQ,EAAD,6BACA,kBAACE,EAAD,KACA,kBAACN,EAAD,iBACA,kBAACF,EAAD,CAAOkC,KAAK,SAASC,SAAUX,KAAKN,iBAEpC,6BACA,kBAACR,EAAD,KACA,kBAACR,EAAD,iBACA,kBAACF,EAAD,CAAOkC,KAAK,SAASC,SAAUX,KAAKJ,iBAEpC,kBAACT,EAAD,KACA,kBAAChB,EAAD,CAAQyC,QAASZ,KAAKH,SAAtB,YAEA,kBAACjB,EAAD,KACGoB,KAAKV,MAAMC,KAAOS,KAAKV,MAAMC,KAAO,IAAI,kCAD3C,eAGIS,KAAKV,MAAME,KAAOQ,KAAKV,MAAME,KAAO,IAAI,kCAH5C,eAKGQ,KAAKV,MAAMG,OAASO,KAAKV,MAAMG,OAAS,IAAI,wC,GAvD3BoB,IAAMC,WCzCjBC,E,uKARX,OACA,kBAAC,EAAD,U,GAHcF,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3820ab0.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Button = styled.button `\r\nborder-radius: 3px;\r\nbackground: blue;\r\ncolor: white;\r\nborder: 2px;\r\nmargin: 0;\r\n`;\r\n\r\nconst Form = styled.form `\r\nheight: 400px;\r\nbackground: teal;\r\nwidth: 300px;\r\n\r\n\r\n`;\r\n\r\nconst Input = styled.input `\r\nmargin: 20px;\r\nalign-content: center;\r\n`;\r\n\r\nconst Label = styled.label `\r\nmargin: 20px;\r\n`\r\n\r\nconst P = styled.p `\r\ntext-align: center;\r\nfont-size: 30px;\r\nwidth: 100%;\r\n\r\n`;\r\n\r\nconst H1 = styled.h1 `\r\nposition: relative;\r\nbackground: black;\r\ntext-align: justify;\r\ncolor: white;\r\nwidth: 100%;\r\n`\r\n\r\nconst Div1 = styled.div `\r\ntext-align:center;\r\n`\r\nconst Div2 = styled.div `\r\ntext-align:center;\r\n`\r\nconst DivB = styled.div `\r\ntext-align: center;\r\n`\r\n\r\n\r\nclass Pythagorean extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      val1: 0,\r\n      val2: 0,\r\n      result: 0\r\n    };\r\n    this.handleChange1 = this.handleChange1.bind(this);\r\n    this.handleChange2 = this.handleChange2.bind(this);\r\n    this.thereom = this.thereom.bind(this);\r\n  }\r\n    handleChange1(e) {\r\n      e.preventDefault();\r\n      this.setState({\r\n        val1: Number(e.target.value) });\r\n      }\r\n    handleChange2(e){\r\n      e.preventDefault();\r\n      this.setState({\r\n        val2: Number(e.target.value)});\r\n}\r\n\r\n    thereom(e){\r\n      e.preventDefault();\r\n      let pySum = (this.state.val1 ** 2) + (this.state.val2 ** 2);\r\n      let pySqrt = Math.sqrt(pySum).toFixed(2);\r\n      this.setState({\r\n        result: pySqrt\r\n      })\r\n    };\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n    <Form>\r\n      <H1>Pythagorean Theoreom</H1>\r\n      <Div1>\r\n      <Label>A-value:</Label>\r\n      <Input type=\"number\" onChange={this.handleChange1} />\r\n      </Div1>\r\n      <br/>\r\n      <Div2>\r\n      <Label>B-value:</Label>\r\n      <Input type=\"number\" onChange={this.handleChange2} />\r\n      </Div2>\r\n      <DivB >\r\n      <Button onClick={this.thereom}>Submit </Button>\r\n      </DivB>\r\n      <P>\r\n        {this.state.val1 ? this.state.val1 : 'a'}<sup>2</sup> &nbsp;\r\n         + &nbsp;\r\n         {this.state.val2 ? this.state.val2 : 'b'}<sup>2</sup> &nbsp;\r\n         = &nbsp;\r\n        {this.state.result ? this.state.result : 'c'}<sup>2</sup>\r\n      </P>\r\n      </Form>\r\n    )\r\n  };\r\n}\r\n\r\n\r\nexport default Pythagorean;\r\n","import React from 'react';\nimport Pythagorean from '../Pythagorean/Pythagorean.js'\n//import Area from '../area';\n\nclass App extends React.Component {\n  render() {\n    return (\n    <Pythagorean />\n    //<Area />\n    )\n  };\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}